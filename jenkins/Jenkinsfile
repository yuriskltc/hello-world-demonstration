
node {
    def server

    def rtMaven = Artifactory.newMavenBuild()

    def buildInfo
    
    /*tools {
        maven 'Maven'
        
    }*/
    

    //stages {
        stage ('Artifactory configuration') {

        // Obtain an Artifactory server instance, defined in Jenkins --> Manage Jenkins --> Configure System:

            server = Artifactory.server 'JFROGTST'


        // Tool name from Jenkins configuration, defined in Jenkins --> Manage Jenkins --> Global Tool Configuration  --> Maven Installations --> Name

            rtMaven.tool = 'Maven3'

            rtMaven.deployer releaseRepo: 'my-libs-release-local', snapshotRepo: 'my-libs-snapshot-local', server: server
    
            rtMaven.resolver releaseRepo: 'virtual-repo', snapshotRepo: 'virtual-repo', server: server

            buildInfo = Artifactory.newBuildInfo()

        }
        stage('Fetch') {
        //    steps {
                //git 'https://github.com/yuriskltc/simple-maven-project-with-tests.git'
                git credentialsId: 'GITHUB', url: 'https://github.com/yuriskltc/simple-java-maven-app.git'
                //git 'https://github.com/jfrog/project-examples.git'

         //   }
        }
        stage('Test') {
          //  steps {
         //   def buildInfo2
                rtMaven.run pom: 'pom.xml', goals: '-DmavenLocalRepo="" -DmavenSettingsFilePath="" -Dv=${BUILD_NUMBER} test -U '
            //}
            //post {
              //  always {
                  //  junit 'target/surefire-reports/*.xml'
                //}
        //    }
        }
        stage('Build') {
        //    steps {
                // Get some code from a GitHub repository
                

                // Run Maven on a Unix agent.
                //sh "mvn clean package -Dv=${BUILD_NUMBER}   "
                //rtMaven.run pom: 'maven-examples/maven-example/pom.xml', goals: '-DmavenLocalRepo="" -DmavenSettingsFilePath="" clean install -U', buildInfo: buildInfo 
                rtMaven.run pom: 'pom.xml', goals: '-DmavenLocalRepo="" -DmavenSettingsFilePath="" -Dv=${BUILD_NUMBER} clean package -U ', buildInfo: buildInfo
//                rtMaven.run pom: 'pom.xml', goals: '-Dv=${BUILD_NUMBER} clean package ', buildInfo: buildInfo

                // To run Maven on a Windows agent, use
                // bat "mvn -Dmaven.test.failure.ignore=true clean package"
       //     }

        //    post {
                // If Maven was able to run the tests, even if some of the test
                // failed, record the test results and archive the jar file.
          //      success {
              //      junit '**/target/surefire-reports/TEST-*.xml'
                //    archiveArtifacts 'target/*.jar'
            //    }
            }
        //}
        stage ('Deploy') {
            rtMaven.deployer.deployArtifacts buildInfo
        }
        stage ('Publish build info') {
           // buildInfo1.append buildInfo2
            server.publishBuildInfo buildInfo

        }
  //  }
}
